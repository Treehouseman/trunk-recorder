diff --git a/trunk-recorder/recorders/analog_recorder.cc b/trunk-recorder/recorders/analog_recorder.cc
old mode 100644
new mode 100755
index 2a0617a..01a4d8b
--- a/trunk-recorder/recorders/analog_recorder.cc
+++ b/trunk-recorder/recorders/analog_recorder.cc
@@ -43,8 +43,8 @@ analog_recorder::analog_recorder(Source *src)
 		            dest,
 		            offset,
 		            samp_rate);
-/*
-	prefilter = gr::filter::freq_xlating_fir_filter_ccf::make(decim,
+
+	/*prefilter = gr::filter::freq_xlating_fir_filter_ccf::make(decim,
 	            lpf_taps,
 	            offset,
 	            samp_rate);*/
@@ -156,7 +156,10 @@ void analog_recorder::close() {
 		valve->set_enabled(false);
 		wav_sink->close();
 	} else {
-		BOOST_LOG_TRIVIAL(error) << "p25_recorder.cc: Stopping a non-stopping Logger \t[ " << num << " ] - freq[ " << freq << "] \t talkgroup[ " << talkgroup << " ]";
+		BOOST_LOG_TRIVIAL(error) << "analog_recorder.cc: Stopping a non-stopping Logger \t[ " << num << " ] - freq[ " << freq << "] \t talkgroup[ " << talkgroup << " ]";
+		state = inactive;
+		valve->set_enabled(false);
+		wav_sink->close();//Treehouseman: Why is this different than p25?
 
 	}
 }
@@ -219,12 +222,15 @@ void analog_recorder::start(Call *call, int n) {
 
 	talkgroup = call->get_talkgroup();
 	freq = call->get_freq();
-    num = n;
-
+    //num = n;
+	BOOST_LOG_TRIVIAL(info) << "analog_recorder..: Starting Call : " << talkgroup << "\tFreq: " << freq;
 	prefilter->set_center_freq( freq - center); // have to flip for 3.7
 
 	wav_sink->open(call->get_filename());
 
-	state = active;
+	state = recording;
 	valve->set_enabled(true);
 }
+int analog_recorder::get_num() {
+  return num;
+}
\ No newline at end of file
diff --git a/trunk-recorder/recorders/analog_recorder.h b/trunk-recorder/recorders/analog_recorder.h
old mode 100644
new mode 100755
index d9be27e..852c193
--- a/trunk-recorder/recorders/analog_recorder.h
+++ b/trunk-recorder/recorders/analog_recorder.h
@@ -66,6 +66,7 @@ public:
 	void start(Call *call, int n);
 	void stop();
 	void close();
+	int get_num();
 	double get_freq();
     double get_squelch_in();
     Source *get_source();
diff --git a/trunk-recorder/recorders/p25_recorder.cc b/trunk-recorder/recorders/p25_recorder.cc
old mode 100644
new mode 100755
index 6de8096..2b01c8c
--- a/trunk-recorder/recorders/p25_recorder.cc
+++ b/trunk-recorder/recorders/p25_recorder.cc
@@ -224,7 +224,7 @@ p25_recorder::p25_recorder(Source *src, bool qpsk)
   diffdec->set_max_output_buffer(4096);
 
   // prefilter->set_max_output_buffer(8192);
-  this->set_max_output_buffer(4096);
+  //this->set_max_output_buffer(4096);
 
   /*
      valve->set_min_output_buffer(0);
@@ -465,7 +465,6 @@ void p25_recorder::start(Call *call, int n) {
   if (state == inactive) {
     timestamp = time(NULL);
     starttime = time(NULL);
-
     talkgroup = call->get_talkgroup();
     freq      = call->get_freq();
 
diff --git a/trunk-recorder/source.cc b/trunk-recorder/source.cc
old mode 100644
new mode 100755
index 9d98fe1..e8edfd0
--- a/trunk-recorder/source.cc
+++ b/trunk-recorder/source.cc
@@ -112,6 +112,7 @@ void Source::create_analog_recorders(gr::top_block_sptr tb, int r) {
 
   for (int i = 0; i < max_analog_recorders; i++) {
     analog_recorder_sptr log = make_analog_recorder(this);
+	log->num = rec_num++;
     analog_recorders.push_back(log);
     tb->connect(source_block, 0, log, 0);
   }
@@ -119,7 +120,7 @@ void Source::create_analog_recorders(gr::top_block_sptr tb, int r) {
 
 Recorder * Source::get_analog_recorder(int priority)
 {
-  if (priority > 99) {
+  /*if (priority > 99) {
     BOOST_LOG_TRIVIAL(info) << "\t\tNot recording because of priority";
     return NULL;
   }
@@ -136,6 +137,32 @@ Recorder * Source::get_analog_recorder(int priority)
     }
   }
   BOOST_LOG_TRIVIAL(info) << "[ " << driver << " ] No Analog Recorders Available";
+  return NULL;*/
+   if (priority > 99) {
+    BOOST_LOG_TRIVIAL(info) << "Not recording because of priority";
+    return NULL;
+  }
+
+
+  for (std::vector<analog_recorder_sptr>::iterator it = analog_recorders.begin();
+       it != analog_recorders.end(); it++) {
+    analog_recorder_sptr rx = *it;
+
+    if (rx->get_state() == inactive)
+    {
+      return (Recorder *)rx.get();
+
+      break;
+    }
+  }
+  BOOST_LOG_TRIVIAL(info) << "[ " << device <<
+    " ] No Analog Recorders Available";
+
+  for (std::vector<analog_recorder_sptr>::iterator it = analog_recorders.begin();
+       it != analog_recorders.end(); it++) {
+    analog_recorder_sptr rx = *it;
+    BOOST_LOG_TRIVIAL(info) << "[ " << rx->get_num() << " ] State: " << rx->get_state() << " Has stopped " << rx->has_stopped() << " Freq: " << rx->get_freq();
+  }
   return NULL;
 }
 
@@ -187,7 +214,15 @@ void Source::print_recorders() {
 
 
 
-      BOOST_LOG_TRIVIAL(info) << "[ " << rx->get_num() << " ] State: " << rx->get_state() << " Has stopped " << rx->has_stopped();
+      BOOST_LOG_TRIVIAL(info) << "[ " << rx->get_num() << " ] P25    State: " << rx->get_state() << " Has stopped " << rx->has_stopped();
+  }
+  for (std::vector<analog_recorder_sptr>::iterator it = analog_recorders.begin();
+       it != analog_recorders.end(); it++) {
+    analog_recorder_sptr rx = *it;
+
+
+
+      BOOST_LOG_TRIVIAL(info) << "[ " << rx->get_num() << " ] Analog State: " << rx->get_state() << " Has stopped " << rx->has_stopped();
   }
 }
 void Source::clean_recorders() {
@@ -201,6 +236,16 @@ void Source::clean_recorders() {
       rx->close();
     }
   }
+  for (std::vector<analog_recorder_sptr>::iterator it = analog_recorders.begin();
+       it != analog_recorders.end(); it++) {
+    analog_recorder_sptr rx = *it;
+
+    if ((rx->get_state() == stopping) && (rx->stopping_elapsed() > 60)) {
+      BOOST_LOG_TRIVIAL(info) << "[ " << device <<  " ] Really old recorder ";
+      BOOST_LOG_TRIVIAL(info) << "[ " << rx->get_num() << " ] State: " << rx->get_state() << " Has stopped " << rx->has_stopped() << " Freq: " << rx->get_freq();
+      rx->close();
+    }
+  }
 }
 
 int Source::get_num_available_recorders() {
diff --git a/trunk-recorder/systems/p25_parser.cc b/trunk-recorder/systems/p25_parser.cc
old mode 100644
new mode 100755
index caf3a9e..bd76241
--- a/trunk-recorder/systems/p25_parser.cc
+++ b/trunk-recorder/systems/p25_parser.cc
@@ -541,20 +541,19 @@ std::vector<TrunkMessage>P25Parser::parse_message(gr::message::sptr msg) {
     return messages;
   }
   std::string s = msg->to_string();
-
   // # nac is always 1st two bytes
-  long nac = ((int)s[0] << 8) + (int)s[1];
-
+  //long nac = ((int)s[0] << 16) + ((int)s[1] << 8) + (int)s[2];
+  long nac = s[0]*100+s[1]*10+s[2];
   if (nac == 0xffff) {
     // # TDMA
     // self.update_state('tdma_duid%d' % type, curr_time)
     messages.push_back(message);
     return messages;
   }
-  s = s.substr(2);
+  s = s.substr(3);
 
-  // std::cout << std::dec << "nac " << nac << " type " << type <<  " size " <<
-  // msg->to_string().length() << " mesg len: " << msg->length() << std::endl;
+   //std::cout << std::dec << "nac " << std::hex << nac << std::dec << " type " << type <<  " size " <<
+   //msg->to_string().length() << " mesg len: " << msg->length() << std::endl;
   // //" at %f state %d len %d" %(nac, type, time.time(), self.state, len(s))
   if ((type == 7) || (type == 12)) // and nac not in self.trunked_systems:
   {
diff --git a/trunk-recorder/systems/smartnet_parser.cc b/trunk-recorder/systems/smartnet_parser.cc
old mode 100644
new mode 100755
index dc1bc25..502ede5
--- a/trunk-recorder/systems/smartnet_parser.cc
+++ b/trunk-recorder/systems/smartnet_parser.cc
@@ -11,13 +11,14 @@ float freq;
 
 /* Different Systems will have different band plans. Below is the one for WMATA which is a bit werid:*/
        if (cmd < 0x12e) {
-                freq = float((cmd) * 0.025 + 489.0875);
+                freq = float((cmd) * 0.025 + 855.9875);
         } else if (cmd < 0x2b0) {
-                freq = float((cmd-380) * 0.025 + 489.0875);
+                freq = float((cmd-380) * 0.025 + 855.9875);
         } else {
                 freq = 0;
         }
-      cout << "CMD: 0x" <<  hex << cmd << " Freq: " << freq << " Multi: " << (cmd - 308) * 0.025 << " CMD: " << dec << cmd << endl;
+		freq = float((cmd) * 0.025 + 851.0125);
+      //cout << "CMD: 0x" <<  hex << cmd << " Freq: " << freq << " Multi: " << (cmd - 308) * 0.025 << " CMD: " << dec << cmd << endl;
 /*
 
 	if (cmd < 0x1b8) {
diff --git a/trunk-recorder/systems/smartnet_trunking.cc b/trunk-recorder/systems/smartnet_trunking.cc
old mode 100644
new mode 100755
index 931a3c8..01ec529
--- a/trunk-recorder/systems/smartnet_trunking.cc
+++ b/trunk-recorder/systems/smartnet_trunking.cc
@@ -34,7 +34,7 @@ smartnet_trunking::smartnet_trunking(float               f,
                                                         // for 3.7 because it
                                                         // swapped in the
                                                         // switch.
-  float clockrec_oversample  = 3;
+  float clockrec_oversample  = 7;//Treehouseman Fixed! 3 is apparently too low, moar numbers moar better!
   int   decim                =
     int(samples_per_second / (syms_per_sec * clockrec_oversample));
   float sps       = samples_per_second / decim / syms_per_sec;
@@ -44,23 +44,25 @@ smartnet_trunking::smartnet_trunking(float               f,
   cout << "Control channel: " << chan_freq << endl;
   cout << "Decim: " << decim << endl;
   cout << "Samples per symbol: " << sps << endl;
+  cout << "Sample Rate: " << samp_rate << endl;
+  cout << "Center Frequency: " << center_freq << endl;
 
   std::vector<float> lpf_taps;
 
 
-  lpf_taps =  gr::filter::firdes::low_pass(1, samp_rate, 4500, 2000);
-  std::vector<gr_complex> dest(lpf_taps.begin(), lpf_taps.end());
+  lpf_taps =  gr::filter::firdes::low_pass(1, samp_rate, 4500, 2000, gr::filter::firdes::WIN_HANN);//Treehouseman, added WIN_HANN to match the p25 filter
+  /*std::vector<gr_complex> dest(lpf_taps.begin(), lpf_taps.end());
   freq_xlating_fft_filter_sptr prefilter = make_freq_xlating_fft_filter(decim,
                                                                         dest,
                                                                         offset,
                                                                         samp_rate);
 
-  /*
+  */
           gr::filter::freq_xlating_fir_filter_ccf::sptr prefilter =
              gr::filter::freq_xlating_fir_filter_ccf::make(decim,
                   lpf_taps,
                   offset,
-                  samp_rate);*/
+                  samp_rate);
 
   gr::digital::fll_band_edge_cc::sptr carriertrack =
     gr::digital::fll_band_edge_cc::make(sps, 0.6, 64, 0.35);
diff --git a/trunk-recorder/systems/system.cc b/trunk-recorder/systems/system.cc
old mode 100644
new mode 100755
index 69b6c44..4896357
--- a/trunk-recorder/systems/system.cc
+++ b/trunk-recorder/systems/system.cc
@@ -55,3 +55,10 @@ void System::add_control_channel(double control_channel) {
 double System::get_current_control_channel() {
   return this->control_channels[0];
 }
+
+void System::set_tsys_id(int nac){
+	tsys_id=nac;
+}
+int System::get_tsys_id(){
+	return tsys_id;
+}
\ No newline at end of file
diff --git a/trunk-recorder/systems/system.h b/trunk-recorder/systems/system.h
old mode 100644
new mode 100755
index ae23119..b2aa9d3
--- a/trunk-recorder/systems/system.h
+++ b/trunk-recorder/systems/system.h
@@ -7,6 +7,7 @@
 class System
 {
         int sys_id;
+		int tsys_id;
 public:
         std::string talkgroups_file;
         std::string default_mode;
@@ -23,6 +24,8 @@ public:
         void set_qpsk_mod(bool);
         std::string get_system_type();
         int get_sys_id();
+		int get_tsys_id();
+		void set_tsys_id(int nac);
         void set_system_type(std::string);
         std::string get_talkgroups_file();
         void set_talkgroups_file(std::string);
diff --git a/trunk-recorder/talkgroup.cc b/trunk-recorder/talkgroup.cc
old mode 100644
new mode 100755
index 7437e9c..f0c9da3
--- a/trunk-recorder/talkgroup.cc
+++ b/trunk-recorder/talkgroup.cc
@@ -7,7 +7,8 @@ Talkgroup::Talkgroup(long        num,
                      std::string d,
                      std::string t,
                      std::string g,
-                     int         p) {
+                     int         p,
+					 int         s) {
   number      = num;
   mode        = m;
   alpha_tag   = a;
@@ -15,6 +16,7 @@ Talkgroup::Talkgroup(long        num,
   tag         = t;
   group       = g;
   priority    = p;
+  nac         = s;
   active      = false;
 }
 
diff --git a/trunk-recorder/talkgroup.h b/trunk-recorder/talkgroup.h
old mode 100644
new mode 100755
index 6f7ceef..be9ac46
--- a/trunk-recorder/talkgroup.h
+++ b/trunk-recorder/talkgroup.h
@@ -15,7 +15,8 @@ public:
 								std::string tag;
 								std::string group;
 								int priority;
-								Talkgroup(long num, char m, std::string a, std::string d, std::string t, std::string g, int p);
+								int nac;
+								Talkgroup(long num, char m, std::string a, std::string d, std::string t, std::string g, int p, int s);
 								bool is_active();
 								int get_priority();
 								void set_active(bool a);
diff --git a/trunk-recorder/talkgroups.cc b/trunk-recorder/talkgroups.cc
old mode 100644
new mode 100755
index c98753e..6049faa
--- a/trunk-recorder/talkgroups.cc
+++ b/trunk-recorder/talkgroups.cc
@@ -43,7 +43,7 @@ std::istream& safeGetline(std::istream& is, std::string& t)
 
 Talkgroups::Talkgroups() {}
 
-void Talkgroups::load_talkgroups(std::string filename) {
+void Talkgroups::load_talkgroups(std::string filename, int s) {
   std::ifstream in(filename.c_str());
 
   if (!in.is_open()) {
@@ -80,7 +80,7 @@ void Talkgroups::load_talkgroups(std::string filename) {
     Talkgroup *tg = new Talkgroup(atoi(vec[0].c_str()), vec[2].at(
                                     0), vec[3].c_str(),
                                   vec[4].c_str(), vec[5].c_str(), vec[6].c_str(),
-                                  atoi(vec[7].c_str()));
+                                  atoi(vec[7].c_str()), s);
 
     talkgroups.push_back(tg);
     lines_pushed++;
@@ -100,14 +100,14 @@ void Talkgroups::load_talkgroups(std::string filename) {
   }
 }
 
-Talkgroup * Talkgroups::find_talkgroup(long tg_number) {
+Talkgroup * Talkgroups::find_talkgroup(long tg_number, int tgs) {
   Talkgroup *tg_match = NULL;
 
   for (std::vector<Talkgroup *>::iterator it = talkgroups.begin();
        it != talkgroups.end(); ++it) {
     Talkgroup *tg = (Talkgroup *)*it;
 
-    if (tg->number == tg_number) {
+    if (tg->number == tg_number && tg->nac == tgs) {
       tg_match = tg;
       break;
     }
diff --git a/trunk-recorder/talkgroups.h b/trunk-recorder/talkgroups.h
old mode 100644
new mode 100755
index d682fb1..96f8ebe
--- a/trunk-recorder/talkgroups.h
+++ b/trunk-recorder/talkgroups.h
@@ -17,7 +17,7 @@ class Talkgroups {
 								std::vector<Talkgroup *> talkgroups;
 public:
 								Talkgroups();
-								void load_talkgroups(std::string filename);
-								Talkgroup *find_talkgroup(long tg);
+								void load_talkgroups(std::string filename, int s);
+								Talkgroup *find_talkgroup(long tg, int s);
 };
 #endif
